step "calculate-deployment-mode-demo" {
    name = "Calculate Deployment Mode"

    action {
        notes = <<-EOT
                **Always Runs**
                
                Step to determine if this run is a deployment, rollback, or re-deployment.
                EOT
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-441"
            Octopus.Action.Template.Version = "5"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "#{Project.ExecutionContainer.K8s}"
        }
    }
}

step "configure-tenant" {
    name = "Configure Tenant"

    action {
        notes = <<-EOT
                **Always Runs**
                
                Runs a runbook to verify the database and namespace for the tenant exists.  If it doesn't exist, it will create it automatically.
                EOT
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-141"
            Octopus.Action.Template.Version = "17"
            Run.Runbook.Api.Key = "#{IaC.Runbook.API.Key}"
            Run.Runbook.AutoApproveManualInterventions = "No"
            Run.Runbook.Base.Url = "#{Octopus.Web.ServerUri}"
            Run.Runbook.CaCBranchName = "#{Octopus.Release.Git.BranchName}"
            Run.Runbook.CancelInSeconds = "1800"
            Run.Runbook.DateTime = "N/A"
            Run.Runbook.Environment.Name = "#{Octopus.Environment.Name}"
            Run.Runbook.Machines = "N/A"
            Run.Runbook.ManualIntervention.EnvironmentToUse = "#{Octopus.Environment.Name}"
            Run.Runbook.Name = "Configure Tenant"
            Run.Runbook.Project.Name = "#{Octopus.Project.Name}"
            Run.Runbook.Space.Name = "#{Octopus.Space.Name}"
            Run.Runbook.Tenant.Name = "#{Octopus.Deployment.Tenant.Name}"
            Run.Runbook.UsePublishedSnapShot = "True"
            Run.Runbook.Waitforfinish = "True"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "#{Project.ExecutionContainer.K8s}"
        }
    }
}

step "generate-database-delta-report" {
    condition = "Variable"
    name = "Generate Database Delta Report"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Runs on Deploy Only**
                
                Deploys the latest database changes to the tenanted database
                EOT
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Script.ScriptFileName = "scripts/deployDatabaseChanges.ps1"
            Octopus.Action.Script.ScriptParameters = "-connectionString \"#{Project.Connection.String}\" -extractedPath \"#{Octopus.Action.Package[PetShop.Database].ExtractedPath}\" -environmentName \"#{Octopus.Environment.Name}\" -changeReportDirectory \"#{Project.ChangeReport.Path}\""
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        tenant_tags = ["Branch Type/Pseudo"]
        worker_pool = "hosted-ubuntu"

        packages "PetShop.Database" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "PetShop.Database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "dba-review-database-changes" {
    condition = "Variable"
    name = "DBA Review Database Changes"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Manual"
        environments = ["staging"]
        notes = <<-EOT
                **Runs on Deployments to Staging Only**
                
                Will pause the deployment so the DBA can review the SQL scripts before running them on Staging.
                EOT
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "DBA, please review the proposed database scripts.  You can find the report in the artifacts menu to the right."
            Octopus.Action.Manual.ResponsibleTeamIds = "dba"
            Octopus.Action.RunOnServer = "false"
        }
        tenant_tags = ["Branch Type/Pseudo"]
    }
}

step "deploy-database-changes" {
    condition = "Variable"
    name = "Deploy Database Changes"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Runs on Deploy Only**
                
                Deploys the latest database changes to the tenanted database
                EOT
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Script.ScriptFileName = "scripts/deployDatabaseChanges.ps1"
            Octopus.Action.Script.ScriptParameters = "-connectionString \"#{Project.Connection.String}\" -extractedPath \"#{Octopus.Action.Package[PetShop.Database].ExtractedPath}\" -environmentName \"#{Octopus.Environment.Name}\""
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        packages "PetShop.Database" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "PetShop.Database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "deploy-product-service" {
    name = "Deploy Product Service"
    properties = {
        Octopus.Action.TargetRoles = "petclinic-tenanted"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        notes = <<-EOT
                **Always Runs**
                
                Deploys the specified version of the product service and Cluster IP to the tenanted namespace.
                EOT
        properties = {
            Octopus.Action.GitRepository.FilePathFilters = "k8s/deployments/product-service-deployment.yaml"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "False"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "False"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "k8s/deployments/product-service-deployment.yaml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.K8s.Namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "#{Project.ExecutionContainer.K8s}"
        }

        packages "octopetshop-productservice" {
            acquisition_location = "NotAcquired"
            feed = "dockerhub"
            package_id = "bobjwalker99/octopetshop-productservice"
            properties = {
                Extract = "False"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "deploy-shopping-cart-service" {
    name = "Deploy Shopping Cart Service"
    properties = {
        Octopus.Action.TargetRoles = "petclinic-tenanted"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        notes = <<-EOT
                **Always Runs**
                
                Deploys the specified version of the shopping cart service and Cluster IP to the tenanted namespace.
                EOT
        properties = {
            Octopus.Action.GitRepository.FilePathFilters = "k8s/deployments/shopping-cart-service-deployment.yaml"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "False"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "False"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "k8s/deployments/shopping-cart-service-deployment.yaml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.K8s.Namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "#{Project.ExecutionContainer.K8s}"
        }

        packages "octopetshop-shoppingcartservice" {
            acquisition_location = "NotAcquired"
            feed = "dockerhub"
            package_id = "bobjwalker99/octopetshop-shoppingcartservice"
            properties = {
                Extract = "False"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "deploy-web-ui" {
    name = "Deploy Web UI"
    properties = {
        Octopus.Action.TargetRoles = "petclinic-tenanted"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        notes = <<-EOT
                **Always Runs**
                
                Deploys the specified version of the Web UI, Cluster IP, and ingress configuration to the tenanted namespace.
                EOT
        properties = {
            Octopus.Action.GitRepository.FilePathFilters = "k8s/deployments/frontend-deployment.yaml"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "False"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "False"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "k8s/deployments/frontend-deployment.yaml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.K8s.Namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "#{Project.ExecutionContainer.K8s}"
        }

        packages "octopetshop-web" {
            acquisition_location = "NotAcquired"
            feed = "dockerhub"
            package_id = "bobjwalker99/octopetshop-web"
            properties = {
                Extract = "False"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "notify-team-of-deployment-status" {
    condition = "Always"
    name = "Notify Team of Deployment Status"

    action {
        notes = <<-EOT
                **Always Runs - Even on Error**
                
                Notifies the team of the deployment status of the application.
                EOT
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-101"
            Octopus.Action.Template.Version = "15"
            OctopusUseBundledTooling = "False"
            ssn_Channel = "trident-status"
            ssn_Color = "#{unless Octopus.Deployment.Error}good#{else}danger#{/unless}"
            ssn_HookUrl = "#{Notification.Slack.Webhook.Url}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "#{Notification.Body.Text}"
            ssn_Title = "#{Notification.DeploymentStatus.Subject.Text}"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "#{Project.ExecutionContainer.K8s}"
        }
    }
}